import toml

def gen_mlp_toml():
    d = {}
    d["file"] = [{"type": "iyokanl1-json", "path": "MLP_converted.json", "name": "MLP"}]
    connect_d = {}
    for i in range(784):
        connect_d[f"MLP/io_in_{i}[0:3]"] = f"@in_{i}[0:3]"
    for i in range(10):
        connect_d[f"@out_{i}[0:7]"] = f"MLP/io_out_{i}[0:7]"
    
    d["connect"] = connect_d

    with open("tests/mlp.toml", mode="w") as f:
        f.write(toml.dumps(d))

def gen_input_toml():
    d = {}
    input_arr
    for i in range(784):
        if input_arr[i] < 0:
            input_arr[i] = 8 - input_arr[i]

    d["bits"] = []
    for i in range(784):
        bit = {"name": f"in_{i}", "size": 4, "bytes": [input_arr[i]]}
        d["bits"].append(bit)

    with open("tests/mlp_01.in", mode="w") as f:
        f.write(toml.dumps(d))

if __name__=="__main__":
    gen_mlp_toml()
    gen_input_toml()