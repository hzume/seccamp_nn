import toml

def test_mlp():
    d = {}
    d["file"] = [{"type": "iyokanl1-json", "path": "MLP_converted.json", "name": "MLP"}]
    d["builtin"] = [{"type": "rom", "name": "input_rom", "in_addr_width": 10, "out_rdata_width": 4}]
    connect_d = {}
    for i in range(784):
        connect_d[f"MLP/io_in_{i}[0:3]"] = f"input_rom/rdata[{i*3}:{(i+1)*3-1}]"
    for i in range(10):
        connect_d[f"@out_{i}[0:7]"] = f"MLP/io_out_{i}[0:7]"
    
    d["connect"] = connect_d

    with open("test_mlp.toml", mode="w") as f:
        f.write(toml.dumps(d))

def input_rom():
    d = {}
    input_arr
    d["rom"] = [{"name": "input_rom", "size": 4 * 1024, "bytes": input_arr}]

    with open("test_mlp_01.in", mode="w") as f:
        f.write(toml.dumps(d))
    
if __name__=="__main__":
    test_mlp()
    input_rom()